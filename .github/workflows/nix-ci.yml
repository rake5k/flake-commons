name: Nix - Build and test
on:
  workflow_call:
    inputs:
      branch:
        description: 'Branch to build'
        required: false
        default: main
        type: string
      nix-command:
        description: 'Extra Nix command to run'
        required: false
        default: flake check
        type: string
      system:
        description: 'System architecture to run on'
        required: false
        type: string
    secrets:
      CACHIX_AUTH_TOKEN:
        required: false
        description: 'Token to authenticate against Cachix'

jobs:
  nix:
    if: inputs.system == null || inputs.system == 'x86_64-linux' || inputs.system == 'x86_64-darwin'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Free disk space
        if: (inputs.system == null || endsWith(inputs.system, 'linux')) && startsWith(matrix.os, 'ubuntu')
        uses: christianharke/free-disk-space@alternative-apt-mirror

      - name: Checkout repository
        if: inputs.system == null || (startsWith(matrix.os, 'macos') && endsWith(inputs.system, 'darwin') || startsWith(matrix.os, 'ubuntu') && endsWith(inputs.system, 'linux'))
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
          # Nix Flakes doesn't work on shallow clones
          fetch-depth: 0

      - name: Install Nix
        if: inputs.system == null || (startsWith(matrix.os, 'macos') && endsWith(inputs.system, 'darwin') || startsWith(matrix.os, 'ubuntu') && endsWith(inputs.system, 'linux'))
        uses: DeterminateSystems/nix-installer-action@v4

      - name: Use GitHub Nix Cache
        if: inputs.system == null || (startsWith(matrix.os, 'macos') && endsWith(inputs.system, 'darwin') || startsWith(matrix.os, 'ubuntu') && endsWith(inputs.system, 'linux'))
        uses: DeterminateSystems/magic-nix-cache-action@v2

      - name: Use Cachix Nix Cache
        if: inputs.system == null || (startsWith(matrix.os, 'macos') && endsWith(inputs.system, 'darwin') || startsWith(matrix.os, 'ubuntu') && endsWith(inputs.system, 'linux'))
        uses: cachix/cachix-action@v12
        with:
          name: christianharke
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Build and Test
        if: inputs.system == null || (startsWith(matrix.os, 'macos') && endsWith(inputs.system, 'darwin') || startsWith(matrix.os, 'ubuntu') && endsWith(inputs.system, 'linux'))
        run: |
          nix \
            --print-build-logs \
            --keep-going \
            ${{ inputs.nix-command }}
